AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM template for the SGEventHub Infrastructure

Parameters:
  DeploymentName:
    Description: Unique name used to create OAC and cache policy.
    Type: String
    AllowedPattern: (?!(^((2(5[0-5]|[0-4][0-9])|[01]?[0-9]{1,2})\.){3}(2(5[0-5]|[0-4][0-9])|[01]?[0-9]{1,2})$|^xn--|.+-s3alias$))^[a-z0-9][a-z0-9.-]{1,61}[a-z0-9]$

Globals: # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-template-anatomy-globals.html
  Function:
    Timeout: 5
    MemorySize: 128
    Runtime: python3.10

Resources:

  CloudFrontOAI:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
          CloudFrontOriginAccessIdentityConfig:
              Comment: 'access-identity-passport-front.s3.amazonaws.com'

  CloudFrontCachePolicy:
      Type: AWS::CloudFront::CachePolicy
      DependsOn: Frontend
      Properties:
          CachePolicyConfig:
              DefaultTTL: 86400
              MaxTTL: 31536000
              MinTTL: 1
              Name: !Ref DeploymentName
              ParametersInCacheKeyAndForwardedToOrigin:
                  CookiesConfig:
                      CookieBehavior: none
                  EnableAcceptEncodingBrotli: true
                  EnableAcceptEncodingGzip: true
                  HeadersConfig:
                      HeaderBehavior: none
                  QueryStringsConfig:
                      QueryStringBehavior: none

  CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
          DistributionConfig:
              HttpVersion: http2
              Enabled: true
              DefaultRootObject: index.html
              DefaultCacheBehavior: 
                  CachePolicyId: !Ref CloudFrontCachePolicy
                  TargetOriginId: thisS3Origin
                  ViewerProtocolPolicy: redirect-to-https
              Origins:
              - 
                  DomainName: !Sub '${Frontend}.s3.${AWS::Region}.amazonaws.com' 
                  Id: thisS3Origin
                  S3OriginConfig:
                    OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOAI}'

  Frontend:
      Type: AWS::S3::Bucket
      Properties:
          BucketName: sgeventhub-frontend
          PublicAccessBlockConfiguration:
              BlockPublicAcls: true
              BlockPublicPolicy: true
              IgnorePublicAcls: true
              RestrictPublicBuckets: true

  FrontendBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
          Bucket: !Ref Frontend
          PolicyDocument:
              Statement:
                  Action: s3:GetObject
                  Effect: Allow
                  Principal:
                      CanonicalUser: !GetAtt CloudFrontOAI.S3CanonicalUserId
                  Resource: !Sub "arn:aws:s3:::${Frontend}/*"                          
                      

  HelloWorldFunction:
      Type: AWS::Serverless::Function # More info about Function Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
      Properties:
          Handler: app.lambda_handler
          CodeUri: hello_world
          Description: Hello World function
          Architectures:
              - x86_64
          Tracing: Active
          Events:
              HelloPath:
                  Type: Api # More info about API Event Source: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-api.html
                  Properties:
                      Path: /hello
                      Method: GET
            # Powertools for AWS Lambda (Python) env vars: https://awslabs.github.io/aws-lambda-powertools-python/#environment-variables
          Environment:
              Variables:
                  POWERTOOLS_SERVICE_NAME: PowertoolsHelloWorld
                  POWERTOOLS_METRICS_NAMESPACE: Powertools
                  LOG_LEVEL: INFO
          Tags:
              LambdaPowertools: python          

  EventCrudApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: EventManagementAPI
      StageName: dev
      DefinitionBody:
        openapi: "3.0.1"
        info:
          title: "DynamoDB Crud API with Canary releases"
          version: "1.0.0"
        x-amazon-apigateway-cors:
          allowOrigins:
            - "*"
          allowHeaders:
            - "Content-Type"
            - "X-Amz-Date"
            - "Authorization"
            - "X-Api-Key"
            - "X-Amz-Security-Token"
          allowMethods:
            - "GET"
            - "OPTIONS"  
        paths:
          /{id}:
            get:
              parameters:
              - name: "id"
                in: "path"
                required: true
                schema:
                  type: "string"
              responses:
                "200":
                  description: "200 response"
                  content: {}
              x-amazon-apigateway-integration:
                type: "aws"
                credentials:
                  Fn::GetAtt: [EventCrudRole, Arn]
                httpMethod: "POST"
                uri: {"Fn::Sub":"arn:aws:apigateway:${AWS::Region}:dynamodb:action/GetItem"}
                responses:
                  default:
                    statusCode: "200"
                    responseTemplates:
                      application/json: |
                        #set($inputRoot = $input.path('$')) 
                        {
                          "item": [
                            {
                              "id": "$inputRoot.Item.id.S",
                              "eventDetails": {
                                "organizer": "$inputRoot.Item.eventDetails.M.organizer.S",
                                "organizerUrl": "$inputRoot.Item.eventDetails.M.organizerUrl.S",
                                "promoter": "$inputRoot.Item.eventDetails.M.promoter.S",
                                "promoterEmail": "$inputRoot.Item.eventDetails.M.promoterEmail.S",
                                "restrictions": "$inputRoot.Item.eventDetails.M.restrictions.S",
                                "resultType": "$inputRoot.Item.eventDetails.M.resultType.S",
                                "showDate": "$inputRoot.Item.eventDetails.M.showDate.N",
                                "showLastDate": "$inputRoot.Item.eventDetails.M.showLastDate.N"
                              },
                              "eventRules": {
                                "maxClassesInEvent": "$inputRoot.Item.eventRules.M.maxClassesInEvent.N",
                                "maxInClass": "$inputRoot.Item.eventRules.M.maxInClass.N",
                                "maxParticipantInClass": "$inputRoot.Item.eventRules.M.maxParticipantInClass.N",
                                "requireVRLAccount": "$inputRoot.Item.eventRules.M.requireVRLAccount.BOOL"
                              },
                              "eventClasses": {
                                #foreach($classKey in $inputRoot.Item.eventClasses.M.keySet())
                                "$classKey": {
                                  "participants": "$inputRoot.Item.eventClasses.M[$classKey].M.participants.S"
                                }#if($foreach.hasNext),#end
                                #end
                              }
                            }  
                          ]
                        }
                requestTemplates:
                  application/json:
                    Fn::Sub: |
                      {
                        "TableName": "${EventCrudDDB}",
                        "Key": {
                          "id": {
                            "S": "$input.params().path.id"
                          }
                        }
                      }
                passthroughBehavior: "when_no_templates"
            put:
              x-amazon-apigateway-authorizer:
                type: "cognito_user_pools"
                providerARNs:
                  - !GetAtt EventUserPool.Arn
              responses:
                "200":
                  description: "200 response"
                  content: {}
              x-amazon-apigateway-integration:
                type: "aws"
                credentials:
                  Fn::GetAtt: [EventCrudRole, Arn]
                httpMethod: "POST"
                uri: {"Fn::Sub":"arn:aws:apigateway:${AWS::Region}:dynamodb:action/UpdateItem"}
                responses:
                  default:
                    statusCode: "200"
                    responseTemplates:
                      application/json: |
                        #set($inputRoot = $input.path('$'))
                        {
                          "id": "$inputRoot.Attributes.id.S",
                          "name": "$inputRoot.Attributes.name.S"
                          "date": "$inputRoot.Attributes.date.S"
                          "location": "$inputRoot.Attributes.location.S"
                          "message": "$inputRoot.Attributes.message.S"
                        }
                requestTemplates:
                  application/json:
                    Fn::Sub: |
                      {
                        "TableName": "${EventCrudDDB}",
                        "Key": {
                          "id": {
                            "S": "$input.params().path.id"
                          }
                        },
                        "ExpressionAttributeNames": {
                          "#m": "message",
                          "#n": "name",
                          "#d": "date",
                          "#l": "location"
                        },
                        "ExpressionAttributeValues": {
                          ":m": {
                            "S": $input.json('$.message')
                          },
                          ":n": {
                            "S": $input.json('$.name')
                          },
                          ":d": {
                            "S": $input.json('$.date')
                          },
                          ":l": {
                            "S": $input.json('$.location')
                          }
                        },
                        "UpdateExpression": "SET #m = :m, #n = :n, #d = :d, #l = :l",
                        "ReturnValues": "ALL_NEW"
                      }
                passthroughBehavior: "when_no_templates"
      
            delete:
              x-amazon-apigateway-authorizer:
                type: "cognito_user_pools"
                providerARNs:
                  - !GetAtt EventUserPool.Arn
              parameters:
              - name: "id"
                in: "path"
                required: true
                schema:
                  type: "string"
              responses:
                "200":
                  description: "200 response"
                  content: {}
              x-amazon-apigateway-integration:
                type: "aws"
                credentials:
                  Fn::GetAtt: [EventCrudRole, Arn]
                httpMethod: "POST"
                uri: {"Fn::Sub":"arn:aws:apigateway:${AWS::Region}:dynamodb:action/DeleteItem"}
                responses:
                  default:
                    statusCode: "200"
                    responseTemplates:
                      application/json: |
                        {
                          "message": "item deleted"
                        }
                requestTemplates:
                  application/json:
                    Fn::Sub: |
                      {
                        "TableName": "${EventCrudDDB}",
                        "Key": {
                          "id": {
                            "S": "$input.params().path.id"
                          }
                        }
                      }
                passthroughBehavior: "when_no_templates"
          /:
            get:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Cache-Control:
                      schema:
                        type: "string"
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                  content: {}
              x-amazon-apigateway-integration:
                type: "aws"
                credentials:
                  Fn::GetAtt: [EventCrudRole, Arn]
                httpMethod: "POST"
                uri: {"Fn::Sub":"arn:aws:apigateway:${AWS::Region}:dynamodb:action/Scan"}
                responses:
                  "200":
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Cache-Control: "'no-cache, no-store'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: |
                        #set($inputRoot = $input.path('$'))
                        $inputRoot.Items
                requestTemplates:
                  application/json:
                    Fn::Sub: |
                      {
                        "TableName": "${EventCrudDDB}"
                      }
                passthroughBehavior: "when_no_templates"
            post:
              x-amazon-apigateway-authorizer:
                type: "cognito_user_pools"
                providerARNs:
                  - !GetAtt EventUserPool.Arn
              responses:
                "200":
                  description: "200 response"
                  content: {}
              x-amazon-apigateway-integration:
                type: "aws"
                credentials:
                  Fn::GetAtt: [EventCrudRole, Arn]
                httpMethod: "POST"
                uri: {"Fn::Sub":"arn:aws:apigateway:${AWS::Region}:dynamodb:action/UpdateItem"}
                responses:
                  default:
                    statusCode: "200"
                    responseTemplates:
                      application/json: |
                        #set($inputRoot = $input.path('$'))
                        {
                          "id": "$inputRoot.Attributes.id.S",
                          "name": "$inputRoot.Attributes.name.S"
                          "date": "$inputRoot.Attributes.date.S"
                          "location": "$inputRoot.Attributes.location.S"
                          "message": "$inputRoot.Attributes.message.S"
                        }
                requestTemplates:
                  application/json:
                    Fn::Sub: |
                      {
                        "TableName": "${EventCrudDDB}",
                        "Key": {
                          "id": {
                            "S": "$context.requestId"
                          }
                        },
                        "ExpressionAttributeNames": {
                          "#m": "message",
                          "#n": "name",
                          "#d": "date",
                          "#l": "location"
                        },
                        "ExpressionAttributeValues": {
                          ":m": {
                            "S": $input.json('$.message')
                          },
                          ":n": {
                            "S": $input.json('$.name')
                          },
                          ":d": {
                            "S": $input.json('$.date')
                          },
                          ":l": {
                            "S": $input.json('$.location')
                          }
                        },
                        "UpdateExpression": "SET #m = :m, #n = :n, #d = :d, #l = :l",
                        "ReturnValues": "ALL_NEW"
                      }

                passthroughBehavior: "when_no_templates"
        components: {}

  EventApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CognitoUserPoolAuthorizer
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - Fn::GetAtt: [EventUserPool, Arn]
      RestApiId:
        Ref: EventCrudApi    

  EventCrudDDB:
    Type: AWS::DynamoDB::Table
    # TODO! These should maybe set to retain when in production?
    # ------
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    # ------
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  EventCrudRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "apigateway.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: DBCrudPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Action:
                - dynamodb:DeleteItem
                - dynamodb:UpdateItem
                - dynamodb:CreateItem
                - dynamodb:GetItem
                - dynamodb:Scan
                - dynamodb:Query
              Effect: Allow
              Resource: !GetAtt EventCrudDDB.Arn

  EventUserPool:
    Type: AWS::Cognito::UserPool
    # TODO! These should maybe set to retain when in production?
    # ------
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    # ------
    Properties:
      UserPoolName: EventHubAppUserPool
      Schema:
        - Name: email
          Required: true
          Mutable: false
      #AutoVerifiedAttributes:
      #  - email

  EventUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: EventUserPool
      ClientName: EventHubAppUserPoolClient
      GenerateSecret: false  # Not recommended for clients that are directly accessed from client-side apps
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - "https://yourapp.com/callback"
      LogoutURLs:
        - "https://yourapp.com/logout"

  EventUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: "sg-event-hub-users"  # This needs to be unique across Cognito
      UserPoolId:
        Ref: EventUserPool     
                  
Outputs:
  SGEventHubCRUDApi:
    Description: "API Gateway endpoint URL for SGEventHub API"
    Value: !Sub  "https://${EventCrudApi}.execute-api.${AWS::Region}.amazonaws.com/dev/"

  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod environment for Hello World Function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello"

  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn

